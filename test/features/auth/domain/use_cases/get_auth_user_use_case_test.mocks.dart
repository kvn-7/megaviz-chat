// Mocks generated by Mockito 5.4.6 from annotations
// in megaviz_chat/test/features/auth/domain/use_cases/get_auth_user_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:megaviz_chat/src/common/models/app_exceptions.dart' as _i5;
import 'package:megaviz_chat/src/common/models/either.dart' as _i4;
import 'package:megaviz_chat/src/features/auth/domain/entities/auth_user.dart'
    as _i6;
import 'package:megaviz_chat/src/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i2.IAuthRepository {
  @override
  _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue:
                _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>.value(
                  _i7.dummyValue<_i4.Either<_i5.AppException, _i6.AuthUser>>(
                    this,
                    Invocation.method(#signInWithGoogle, []),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>.value(
                  _i7.dummyValue<_i4.Either<_i5.AppException, _i6.AuthUser>>(
                    this,
                    Invocation.method(#signInWithGoogle, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>);

  @override
  _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>> signInWithFacebook() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithFacebook, []),
            returnValue:
                _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>.value(
                  _i7.dummyValue<_i4.Either<_i5.AppException, _i6.AuthUser>>(
                    this,
                    Invocation.method(#signInWithFacebook, []),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>.value(
                  _i7.dummyValue<_i4.Either<_i5.AppException, _i6.AuthUser>>(
                    this,
                    Invocation.method(#signInWithFacebook, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.AppException, _i6.AuthUser>>);

  @override
  _i3.Future<_i6.AuthUser?> getAuthUser() =>
      (super.noSuchMethod(
            Invocation.method(#getAuthUser, []),
            returnValue: _i3.Future<_i6.AuthUser?>.value(),
            returnValueForMissingStub: _i3.Future<_i6.AuthUser?>.value(),
          )
          as _i3.Future<_i6.AuthUser?>);

  @override
  _i3.Stream<_i6.AuthUser?> getAuthUserStream() =>
      (super.noSuchMethod(
            Invocation.method(#getAuthUserStream, []),
            returnValue: _i3.Stream<_i6.AuthUser?>.empty(),
            returnValueForMissingStub: _i3.Stream<_i6.AuthUser?>.empty(),
          )
          as _i3.Stream<_i6.AuthUser?>);

  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setOnlineOffline(bool? isOnline) =>
      (super.noSuchMethod(
            Invocation.method(#setOnlineOffline, [isOnline]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
