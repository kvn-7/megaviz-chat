// Mocks generated by Mockito 5.4.6 from annotations
// in megaviz_chat/test/features/auth/presentation/providers/sign_in_state_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:megaviz_chat/src/common/models/app_exceptions.dart' as _i6;
import 'package:megaviz_chat/src/common/models/either.dart' as _i5;
import 'package:megaviz_chat/src/features/auth/domain/entities/auth_user.dart'
    as _i7;
import 'package:megaviz_chat/src/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:megaviz_chat/src/features/auth/domain/use_cases/sign_in_with_facebook_use_case.dart'
    as _i9;
import 'package:megaviz_chat/src/features/auth/domain/use_cases/sign_in_with_google_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SignInWithGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogleUseCase extends _i1.Mock
    implements _i3.SignInWithGoogleUseCase {
  @override
  _i2.IAuthRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeIAuthRepository_0(this, Invocation.getter(#repo)),
            returnValueForMissingStub: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>.value(
                  _i8.dummyValue<_i5.Either<_i6.AppException, _i7.AuthUser>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>.value(
                  _i8.dummyValue<_i5.Either<_i6.AppException, _i7.AuthUser>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>);
}

/// A class which mocks [SignInWithFacebookUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithFacebookUseCase extends _i1.Mock
    implements _i9.SignInWithFacebookUseCase {
  @override
  _i2.IAuthRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeIAuthRepository_0(this, Invocation.getter(#repo)),
            returnValueForMissingStub: _FakeIAuthRepository_0(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i2.IAuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>.value(
                  _i8.dummyValue<_i5.Either<_i6.AppException, _i7.AuthUser>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>.value(
                  _i8.dummyValue<_i5.Either<_i6.AppException, _i7.AuthUser>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.AppException, _i7.AuthUser>>);
}
